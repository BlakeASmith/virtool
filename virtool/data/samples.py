import virtool.database


projector = [
    "_id",
    "_version",
    "name",
    "added",
    "username",
    "imported",
    "archived",
    "pathoscope",
    "nuvs",
    "group",
    "group_read",
    "group_write",
    "all_read",
    "all_write"
]


async def processor(documents):
    """
    Redefined from superclass to prevent syncing of documents for which the requesting connection doesn't have read
    rights.

    :param documents: the documents to process
    :type documents: list

    :return: the processed documents
    :rtype: list

    """
    documents = virtool.database.coerce_list(documents)

    to_send = list()

    user = None

    for document in documents:

        send = user is None or (
            document["group"] == "none" or document["all_read"] or user["_id"] == document["username"] or
            document["group"] in user["groups"] or "administrator" in user["groups"]
        )

        if send:
            to_send.append(document)

    return to_send


async def set_stats(db, sample_id, quality):
    """
    Populates the ``quality`` field of the document with data generated by FastQC. Data includes GC content, read
    length ranges, and detailed quality data. Also sets the ``imported`` field to ``True``.

    Called from an :class:`.ImportReads` job.

    :param data: the data to be added to the sample document
    :type data: dict

    """
    await db.samples.update(sample_id, {
        "$set": {
            "quality": quality,
            "imported": True
        }
    })


async def set_analysis(db, sample_id, analysis_id, analysis_data):
    """
    Update the analysis document identified using ``data``, which contains the analysis id and the update. Sets the
    analysis' ``ready`` field to ``True``. Sets the parent sample's ``analyzed`` field to ``True`` and increments
    its version by one.

    """
    document = await db.analyses.find_one({"_id": analysis_id})
    document.update(analysis_data)
    document["ready"] = True

    await db.analyses.update({"_id": analysis_id}, {"$set": document})

    await db.samples.update(sample_id, {
        "$inc": {"_version": 1},
        "$set": {"analyzed": True}
    })
